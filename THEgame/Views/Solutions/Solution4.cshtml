@using THEgame.Models.Solutions
@model Solution1Model
@Html.HiddenFor(m => m.Temp)
<h4 class="titlesol">@ViewData["Title"]</h4>
<form asp-action="SendMessage" asp-controller="Solutions" class="locationcanvas">
    <!--img class="canvasimg" src="~/Ge5tF-aEUBQ.jpg" /-->
    <canvas id="quintus" class="canvasimg"></canvas>
    <div class="canvasright">        
        <button type="button" class="btn btn-light canvasbuttons" disabled id="location1">@Html.ActionLink("Хайлиф", "Solution3", "Solutions", null, new { @class = "text-decoration-none" })</button>
        <div class="canvaslog">
            <div class="formsol" id="flex2">
                @foreach (ChatModel chat in ViewBag.Chat)
                {
                    <div class="chatmessage"><span class="chatname">@chat.UserName:</span> @chat.Message</div>
                }
            </div>
        </div>
        <div>
            <input class="textsol" type="text" asp-for="Name" id="flex1" autocomplete="off">
            <input type="range" name="rangeInput" disabled class="form-range" min="0" id="textInput" value="@Model.Temp" >            
            <button type="submit" id="buttonsubmit"  style="float:right;" class="btn btn-warning">Отправить</button>
        </div>
        <div class="canvasppl">
            <span class="border-bottom">Игроки в этой локации</span>
            <ul class="canvasppllist">
            @foreach (UserModel country in ViewBag.Users)
            {                
                    <li>@country.Name <span class="classicon" id="@country.Id" disabled="disabled" title="Пол: @country.Sex; Раса: @country.Race; Уровень: @country.CharLevel;">&#936;</span></li>                
            }
                </ul>
        </div>
    </div>
</form>
<script type="text/javascript">
    let inta = parseFloat(document.getElementById("Temp").value);    
    
    initializeClock('textInput');

    var Q = Quintus()
        .include("Sprites, Scenes, Input, 2D, Touch, UI")
        .setup({ maximize: true })
        .controls().touch()
        
Q.Sprite.extend("Player",{
  init: function(p) {
    this._super(p, { sheet: "player", x: 410, y: 90 });
    this.add('2d, platformerControls');
    
    this.on("hit.sprite",function(collision) {
      if(collision.obj.isA("Tower")) {
        Q.stageScene("endGame",1, { label: "You Won!" }); 
        this.destroy();
      }
    });
  }
});

Q.Sprite.extend("Tower", {
  init: function(p) {
    this._super(p, { sheet: 'tower' });
  }
});

Q.Sprite.extend("Enemy",{
  init: function(p) {
    this._super(p, { sheet: 'enemy', vx: 100 });
    this.add('2d, aiBounce');
    
    this.on("bump.left,bump.right,bump.bottom",function(collision) {
      if(collision.obj.isA("Player")) { 
        Q.stageScene("endGame",1, { label: "You Died" }); 
        collision.obj.destroy();
      }
    });
    
    this.on("bump.top",function(collision) {
      if(collision.obj.isA("Player")) { 
        this.destroy();
        collision.obj.p.vy = -300;
      }
    });
  }
});

Q.scene("level1",function(stage) {
  stage.collisionLayer(new Q.TileLayer({ dataAsset: 'level.json', sheet: 'tiles' }));
  var player = stage.insert(new Q.Player());
  
  stage.add("viewport").follow(player);
  
  stage.insert(new Q.Enemy({ x: 700, y: 0 }));
  stage.insert(new Q.Enemy({ x: 800, y: 0 }));
  
  stage.insert(new Q.Tower({ x: 180, y: 50 }));
});

Q.scene('endGame',function(stage) {
  var box = stage.insert(new Q.UI.Container({
    x: Q.width/2, y: Q.height/2, fill: "rgba(0,0,0,0.5)"
  }));
  
  var button = box.insert(new Q.UI.Button({ x: 0, y: 0, fill: "#CCCCCC",
                                           label: "Play Again" }))         
  var label = box.insert(new Q.UI.Text({x:10, y: -10 - button.p.h, 
                                        label: stage.options.label }));
  button.on("click",function() {
    Q.clearStages();
    Q.stageScene('level1');
  });
  box.fit(20);
});

Q.load("sprites.png, sprites.json, level.json, tiles.png", function() {
  Q.sheet("tiles","tiles.png", { tilew: 32, tileh: 32 });
  Q.compileSheets("sprites.png","sprites.json");
  Q.stageScene("level1");
});

    document.addEventListener('DOMContentLoaded', function () {
        for (let i = 1; i <= 4; i++) {
            $("#" + i).tooltip({ placement: 'right', html: true });
        }
        let set = document.getElementById("textInput");
        set.setAttribute("max", inta);
        set.style.width = "70%";
    });

</script>